package com.chen_hewen.fileexplorer;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Environment;
import android.util.Log;
import android.widget.BaseAdapter;

import com.chen_hewen.fileexplorer.DownloadAdapter.ViewHolder;

public class MyAsynctask extends AsyncTask<String, Integer, String> {
	Context mContext;
	ViewHolder mHolder;
	
	String mUrlStr;
	URL mURL;
	HttpURLConnection mConn;
	InputStream mIs;
	BufferedInputStream mBis;
	OutputStream mOs;
	BufferedOutputStream mBos;
	long mSize;
	private boolean mFlag = true;
	SharedPreferences sp;
	Editor mEditor;
	long mSavedSize;
	int mTaskId;
	BaseAdapter mAdapter;
	DownloadItem mItem;
	
	public MyAsynctask(Context context, ViewHolder holder, int taskId, BaseAdapter adapter, DownloadItem item) {
		mContext = context;
		mHolder = holder;
		mTaskId = taskId;
		mAdapter = adapter;
		this.mItem = item;
	}
	
	@SuppressLint("NewApi")
	@Override
	protected String doInBackground(String... params) {
		Log.d("asynctask", "taskId=" + mTaskId);
		String urlStr = params[0];
		String fileName = params[1];

		
		try {
			mURL = new URL(urlStr);
			mConn = (HttpURLConnection) mURL.openConnection();
						
			byte[] buffer = new byte[1024];
			String str = Environment.getExternalStorageDirectory().toString()+ "/" + fileName;
			
			File f = new File(str);
			
			//如果文件存在，读取文件下载进度，文件大小，继续下载
			//文件不存在，则创建下载记录文件，并将文件大小存入其中
			if(f.exists()){
				sp = mContext.getSharedPreferences("savedData", Context.MODE_PRIVATE);
				mSize = sp.getLong(fileName + "_size", 1);
				mSavedSize = sp.getLong(fileName + "_savedSize", 2);
				//showProgress(mSavedSize, mSize);
				//publishProgress((int)(mSavedSize * 1.0f / mSize * 100));
				if(mSavedSize>=mSize){			
					f.delete();
					mSavedSize = 0;
				}
				mConn.setRequestProperty("Range", "bytes=" + mSavedSize + "-" + mSize);
			}else{
				mItem.setState(DownloadItem.State.UNSTART);
				mSize = Integer.parseInt(mConn.getHeaderField("Content-Length"));
				sp = mContext.getSharedPreferences("savedData", Context.MODE_PRIVATE);
				mEditor = sp.edit();
				mEditor.putLong(fileName + "_size", mSize);
				mEditor.commit();
			}
			
			FileOutputStream fos = new FileOutputStream(str, true);			
			mIs = mConn.getInputStream();
			mBis = new BufferedInputStream(mIs);
			mBos = new BufferedOutputStream(fos);
			
			int length = 0;
			//从网络读取文件，写入指定文件中
			while(((length = mBis.read(buffer)) != -1) && mFlag  == true){
				mItem.setState(DownloadItem.State.BUSY);
				mSavedSize += length;
				mBos.write(buffer, 0 , length);
				mBos.flush();
				if(((mSavedSize / length) % 100) == 0){
					showProgress(mSavedSize, mSize);
				}				
			}
			if(mFlag  == false){
				mItem.setState(DownloadItem.State.PAUSE);
			}
			if(mFlag  == true){
				showProgress(100);
				mItem.setState(DownloadItem.State.OVER);
			}
			
			//停止读取文件时，暂停、下载完成：都要将下载进度保存到文件中
			sp = mContext.getSharedPreferences("savedData", mContext.MODE_PRIVATE);
			mEditor = sp.edit();
			mEditor.putLong(fileName+ "_savedSize", mSavedSize);
			mEditor.commit();
			
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally{
			try{
				if(mBis != null){
					mBis.close();
				}
				if(mBos != null){
					mBos.close();
				}
			} catch(Exception e){
				e.printStackTrace();
			}
		}
		return null;
	}
	
	@Override
	protected void onPostExecute(String result) {
		super.onPostExecute(result);
	}

	@Override
	protected void onProgressUpdate(Integer... values) {
		mHolder.bar.setProgress(values[0]);
		if(values[0] == 100){
			mHolder.button.setText("完成");
		}
		super.onProgressUpdate(values);
	}

	
	public void setFlag(boolean f){
		mFlag = f;
	}
	private void showProgress(int progress){
		publishProgress(progress);
		
	}
	
	private void showProgress(long saveSize, long size){
		publishProgress((int)(saveSize * 1.0f / size * 100));
	}

	
}
