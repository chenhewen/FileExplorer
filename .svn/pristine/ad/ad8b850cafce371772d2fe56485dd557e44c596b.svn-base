package com.chen_hewen.fileexplorer;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import android.os.Environment;
import android.util.Log;
import android.util.LogPrinter;

public class FileHelper {
	
	private String mSDPath;
	private String mFileName;
	private String mCurPath;
	private String mCutFilePathWithFileName;
	private String mPastedFilePathWithFileName;
	
	public FileHelper(){
		initCurPath();
	}

	/*********************************************路径相关的辅助类*********************************************/

	public String withSlashBefore(String str){
		return "/" + str;
	}
	
	//获取当前路径
	public String getCurPath(){
		return mCurPath;
	}
	
	//初始化SD卡路径的值，当前路径的值

	//如果第一次启动程序，将根目录赋值给mCurPath
	//如果不是第一次，那么从文件里读出上一次退出的路径，赋值给mCurPath
	
	//先实现从根路径进入,也就是每次启动应用mCurPath的值为根路径的值
	public void initCurPath(){
		if(mCurPath == null){
			mCurPath = mSDPath== null ? getSDCardRootPath() : mSDPath;
		}		
	}
	
	
	//同步文件路径
	public String correctCurPath(){
		mCurPath = mCurPath.substring(0, mCurPath.lastIndexOf("/"));
		return mCurPath;
	}
	
	//同步文件路径
	public String correctCurPath(String path){		
			
		mCurPath += withSlashBefore(path);
		return mCurPath;
	}
	
	//连接文件路径，但是不改变当前路径
	public String joinCurPath(String path){
		return mCurPath + withSlashBefore(path);
	}
	
	public File pathToFile(String path){
		return new File(path);
	}
	
	/*********************************************SD卡相关类*********************************************/
	
	//判断SD卡是否存在
	public boolean isSDCardExist(){
		return Environment.getExternalStorageState()
				.equals(Environment.MEDIA_MOUNTED);
	} 
	
	//获取SD卡根路径
	public String getSDCardRootPath(){
		if(!isSDCardExist()){
			return null;
		}
		mSDPath = Environment.getExternalStorageDirectory().toString();
			
		return mSDPath;
	}
	
	
	
	/*********************************************获取文件夹目录结构*********************************************/
	
	//获取指定路径下的文件夹和文件
	public File[] getDirsAndFiles(String path){
		File file = new File(path);
		File[] files =  file.listFiles();
		return files;
	}
	
	//进入文件，同时更新当前路径！
	public File[] openDirAndReturnFiles(String path){
		initCurPath();
		correctCurPath(path);
		return getDirsAndFiles(mCurPath);
	}
	
	//返回父目录，同时更新当前路径！
	public File[] backToParentDirAndReturnFiles(){
		correctCurPath();
		return getDirsAndFiles(mCurPath);
	}
	
	
	
	
	/*********************************************创建文件夹*********************************************/
	
	//在指定路径新建文件夹
	public boolean createDir(String path){
		File file = new File(path);
		if(file.isDirectory()){
			return false;
		}
		return file.mkdirs();
	}
	
	//在当前路径创建指定文件夹
	public boolean createDirInCurPath(String path){
		return createDir(joinCurPath(path));
	}	
	
	
	
	/***************************************************删除、复制、剪切、粘贴文件夹*********************************/
	
	//删除当前文件夹下的所有内容，参数为路径
	public void deleteInCurPath(String path){
		deleteInCurPath(new File(joinCurPath(path)));
	}
	
	//删除当前文件夹下所有内容，参数。
	//该方法内部实现遍历的时候要注意要先删除子文件夹，delete方法有关。
	public void deleteInCurPath(File file){
		if(!file.exists()){
			return;
		}
		File[] files = file.listFiles();
		//当files为空，意味着它是一个“文件”不是文件夹，当length=0
		if(files == null || files.length == 0){
			file.delete();
		}else{
			for(File f: files){
				deleteInCurPath(f);
			}
			//当把子文件夹删除完成后，删除父文件夹，这个只能最后删除。因为该方法只能删除空文件夹。
			file.delete();
		}
	}
	
	//复制文件
	public void cutFile(String fileName){
		mFileName = fileName;
		mCutFilePathWithFileName = joinCurPath(fileName);		
	}
	
	//强制覆盖文件
	public void createOrOverwriteFile(){
		BufferedInputStream bufis = null;
		BufferedOutputStream bufos = null;
		try{
			byte[] buffer = new byte[1024];
			bufis = new BufferedInputStream(new FileInputStream(mCutFilePathWithFileName));
			bufos = new BufferedOutputStream(new FileOutputStream(mPastedFilePathWithFileName));
			while(bufis.read(buffer) != -1){
				bufos.write(buffer);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try {
				if (bufis != null) {
					bufis.close();
					bufos.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	//粘贴文件
	public boolean pasteFile(){
		mPastedFilePathWithFileName = joinCurPath(mFileName);
		File file = new File(mPastedFilePathWithFileName);
				
		if(file.exists()){
			return false;
		}
		createOrOverwriteFile();
		return true;			
	} 
}
